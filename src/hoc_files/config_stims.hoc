// Set up stimulation vectors
objref inhibitStims, exciteStims
inhibitStims = new Vector()
exciteStims = new Vector()

// DO NOT CHANGE VALUES WITHIN A METHOD
// RATHER CREATE A NEW METHOD, AND REFERENCE THAT ONE

//predfined variables for case loops
is=0
es=0
iw=0
ew=0

//---------------------------------------------------------------------------
//								SYNAPTIC FIRING RATE
//---------------------------------------------------------------------------

//---------------------------------------
//				WEIGHTS
//---------------------------------------
// Set up weight vectors 
// 	weight == number of receptors at synapse
//	'strength' per receptor (uS) defined by gmax
objref inhibWeights,exciteWeights
proc proximalWeights(){
	print "config_stims: proximalWeights"
	if(numarg()>=1){
		inhibWeights = $o1
		if(numarg()==2){
			exciteWeights = $o2
		}
	}else{
		configWeights()
	}
}
proc distalWeights(){
	print "config_stims: distalWeights"
	if(numarg()>=1){
		inhibWeights = $o1
		if(numarg()==2){
			exciteWeights = $o2
		}
	}else{
		configWeights()
	}
}

proc multiplicativeBaseWeights(){
	print "config_stims: multiplicativeBaseWeights"
	inhibWeights = new Vector()
	exciteWeights = new Vector()
	if(numarg()==1){
		fprint("error: must specify both weights in multiplicativeBaseWeights\n")
	}else if(numarg()==2){
			iwb = $1
			ewb = $2
	}else{
		iwb = inhibWeight_config
		ewb = exciteWeight_config
	}
	for case(&iw,1,5,10,50,100,500,1000){
		inhibWeights.append(iw*iwb)
	}
	for case(&ew,1,5,10,50,100,500,1000){
		exciteWeights.append(ew*ewb)
	}
}

proc configWeights(){
	print "config_stims: configWeights"
	inhibWeights = new Vector()
	exciteWeights = new Vector()
	inhibWeights.append(inhibWeight_config)
	exciteWeights.append(exciteWeight_config)
}

//---------------------------------------
//				FREQUENCY
//---------------------------------------
proc setInhibitStims(){
	print "config_stims: setInhibitStims"
	inhibitStims = $o1
}

proc setExciteStims(){
	print "config_stims: setExciteStims"
	exciteStims = $o1
}

proc fineLowHzRange(){
	print "config_stims: fineLowHzRange"
	nullStims()
	for case(&is,0,1,3,5,7,10,12,14,16,19,20,21,22,23,24,25){
		inhibitStims.append(is)
	}
	for case(&es,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20){
		exciteStims.append(es)
	}
}

proc fineHzRange(){
	print "config_stims: fineHzRange"
	nullStims()
	for case(&is,0,1,5,10,15,20,25,30,35,40,45,50,60,65,70,75,80,85,90,95,100){
		inhibitStims.append(is)
	}
	for case(&es,0,1,5,10,15,20,25,30,35,40,45,50,60,75,90,100){
		exciteStims.append(es)
	}
}

proc fineHzRangeInhibControl(){
	print "config_stims: fineHzRangeInhibControl"
	nullStims()
	inhibitStims.append(0)
	for case(&is,0,1,5,10,15,20,25,30,35,40,45,50,60,65,70,75,80,85,90,95,100){
		exciteStims.append(is)
	}
}

proc fineHzRangeMatched(){
	print "config_stims: fineHzRangeMatched"
	// best when index_synced=1
	nullStims()
    for case(&is,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100){
        inhibitStims.append(is)
        exciteStims.append(is)
    }

	for case(&is,11,12,13,14,16,17,18,19,21,22,23,24,26,27,28,29,31,32,33,34,36,37,38,39){
		inhibitStims.append(is)
		exciteStims.append(is)
	}

}

proc broadInhHzRange(){
	print "config_stims: broadInhHzRange"
	inhibitStims = new Vector()
	for case(&is,0,1,5,10,25,40,50,60,75,85,100){
		inhibitStims.append(is)
	}
}

proc broadExcHzRange(){
	print "config_stims: broadExcHzRange"
	exciteStims = new Vector()
	for case(&es,0,1,5,10,25,40,50,60,75,90,100,120,150,200){
		exciteStims.append(es)
	}
}

proc broadHzRange(){
	print "config_stims: broadHzRange"
	// Hz testing ground
	broadInhHzRange()
	broadExcHzRange()
}

proc highInhHzRange(){
	print "config_stims: highInhHzRange"
	inhibitStims = new Vector()
	for case(&is,0,1,75,85,100){
		inhibitStims.append(is)
	}
}

proc highExcHzRange(){
	print "config_stims: highExcHzRange"
	exciteStims = new Vector()
	for case(&es,0,100,120,150,200){
		exciteStims.append(es)
	}
}

proc highHzRange(){
	print "config_stims: highHzRange"
	// higher frequency values
	highInhHzRange()
	highExcHzRange()
}

proc logHzRange(){
	print "config_stims: logHzRange"
	nullStims()
	for case(&is,0,1,10,100,1000,10000){
		inhibitStims.append(is)
	}
	for case(&es,0,1,10,100,1000,10000){
		exciteStims.append(es)
	}
}

proc HzNothing(){
	print "config_stims: HzNothing"
	nullStims()
	for case(&is,0){
		inhibitStims.append(is)
	}
	for case(&es,0){
		exciteStims.append(es)
	}
}

//---------------------------------------
//				BURST
//---------------------------------------
objref burstInhibitStims, burstExciteStims
burstInhibitStims = new Vector()
burstExciteStims = new Vector()
proc burstHzGammaRange(){
	print "config_stims: burstHzGammaRange"
	burstInhibitStims = new Vector()
	burstExciteStims = new Vector()
	for case(&is,0,15,20,25){
		burstInhibitStims.append(is)
	}
	for case(&es,0,40,60,80,100){
		burstExciteStims.append(es)
	}
}

proc burstProtocol(){local burstsize localobj tempstimsI, tempstimsE
	print "config_stims: burstProtocol"
	nullStims()
	tempstimsI = new Vector()
	tempstimsE = new Vector()
	
	burstInhibitStims = new Vector()
	burstExciteStims = new Vector()
	// sync up burst and inhibitStim indices
	// so a longer for loop in run is used, but not ANOTHER for loop
	// 	this is more extendible and backwards compatible
	// e.g. inhibitStims will be [00 00 00 10 10 10 20 20 20]
	//		burstInhibitStims:   [00 15 20 00 15 20 00 15 20]
	for case(&is,0,10,20){
		tempstimsI.append(is)
	}
	for case(&es,0,5,10){
		tempstimsE.append(es)
	}
	burstsize=0
	for i=0,i<tempstimsI.size()-1{
		for case(&is,0,15,20,25){
			burstInhibitStims.append(is)
		}
		if(burstsize==0){
			burstsize=burstInhibitStims.size()
		}
		for e=0,e<burstsize-1{
			inhibitStims.append(tempstimsI.x[i])
		}
	}
	burstsize=0
	for i=0,i<tempstimsE.size()-1{
		for case(&es,0,40,60,80,100){
			burstExciteStims.append(es)
		}
		if(burstsize==0){
			burstsize=burstExciteStims.size()
		}
		for e=0,e<burstsize-1{
			exciteStims.append(tempstimsE.x[i])
		}
	}
}

//---------------------------------------------------------------------------
//							PERSISTANT CONDUCTANCE
//---------------------------------------------------------------------------

proc excPersistant(){
	print "config_stims: excPersistant"
	exciteStims = new Vector()
	for case(&es,10,12,14,16,18,20,22,24,26,28,30,32.5,35,37.5,40,42.5,45,47.5,50,53.33,56.66,60,63.33,66.66,70,75,80,85,90,95,100,110,120,130,140,150,160,180,200,225,250,275,300,350,400,450,500,550,600,700,800,900,1000,1200,1400,1500,1600,1800,2000,2500,3000,4000,5000,10000,20000,30000,40000,50000,60000,70000,80000,90000,100000,500000,1000000){
		exciteStims.append(es/10)
	}
}

proc proximalInhPersistant(){
	print "config_stims: proximalInhPersistant"
	inhibitStims = new Vector()
	for case(&is,0,0.05,0.1,0.5,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15){
		inhibitStims.append(is/10)
	}
}

proc distalInhPersistant(){
	print "config_stims: distalInhPersistant"
	inhibitStims = new Vector()
	for case(&is,0,1,2,4,10,20,40,50,100,200,500,1000,2000,5000,10000){
		inhibitStims.append(is/10)
	}
}

proc distalLowerInhPersistant(){
	print "config_stims: distalLowerInhPersistant"
	inhibitStims = new Vector()
	for case(&is,0,10,25,50,75,100,125,150,175,200,250,300,400,500){
		inhibitStims.append(is/10)
	}
}

proc spreadInhPersistant(){
	print "config_stims: spreadInhPersistant"
	inhibitStims = new Vector()
	for case(&is,0,0.1,0.25,0.5,0.75,1,2,4,10,20,40,50,100,200,500,1000,2000,5000,10000,20000){
		inhibitStims.append(is/10)
	}
}

proc nullStims(){
	print "config_stims: nullStims"
	inhibitStims = new Vector()
	exciteStims = new Vector()
}

// printf("config_stims file loaded\n")
