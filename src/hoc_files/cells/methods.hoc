load_file("../config.hoc")
persist_base = persist_base_config
//------------------------------------------------------------------------------
// Stimulations
//------------------------------------------------------------------------------
// provide network stimulation at a GABA synapse
// args: 
//    $o1 - NetStim object to alter
//    $2 - frequency of stimulation (Hz)
//    $3 - duration of stimulation (s)
//    $4 - start of stimulation (ms)
//    $5 - noise of stimulation
proc stimnet(){local old_hz localobj netstim
  old_hz = hz
  netstim = $o1
  hz = $2
  if(hz==0){
    netstim.interval = 0
    netstim.number = 0
  }else{
    netstim.interval = 1000/hz  //ms
    if(numarg()==2){
      netstim.number = netstim.number * (hz/old_hz)
    }else if(numarg()>=3){
      if($3>=0){
        netstim.number = hz * $3
      }
      if (numarg()>=4){
        if($4>=0){
          netstim.start = $4
        }
      }
      if (numarg()==5){
        netstim.noise = $5
      }
    }
    if((netstim.number/hz)*1000 + netstim.start > tstop){
      tstop = (netstim.number/hz)*1000 + netstim.start + 10
    }
    //print "[Hz = ",hz,"] \t [duration=",$3,"]\t[start=",netstim.start,"\t[noise=",netstim.noise,"]\t[netstim.interval= ",netstim.interval,"]\t[netstim.number=",netstim.number,"]\t[tstop=",tstop,"]"
  }
}


// network stimulation
objectvar netstimEx[nexc], netstimIn[ninh], netstimExBurst[nexc], netstimInBurst[ninh], netstimExAfterBurst[nexc], netstimInAfterBurst[ninh]
// set up random number generators for each netstim
objectvar rsEx[nexc], rsIn[ninh], rsExBurst[nexc], rsInBurst[ninh], rsExAfterBurst[nexc], rsInAfterBurst[ninh]
random_stream_offset_ = 1000      // max # events in a NetStim's stream
                                  // before it begins to repeat values already generated
                                  // by a different stream.
                                  // set to 0 and all NetStims will produce identical streams

hz = inhHz = excHz =0
// defaults
stimDuration = inhDuration = excDuration = 1
stimStart = inhStart = excstimStart = 0
stimNoise = inhNoise = excNoise = 0.1

burstHz = inhBurstHz = excBurstHz = 0
burstDuration = inhBurstDuration = excBurstDuration = 0
burstStart = inhBurstStart = excBurstStart = 0
burstNoise = inhBurstNoise = excBurstNoise = stimNoise

//------------------------------------------------------------------------------
// Synaptic Connections
//------------------------------------------------------------------------------

objectvar netconEx[nexc], netconIn[ninh], netconExBurst[nexc], netconInBurst[ninh], netconExAfterBurst[nexc], netconInAfterBurst[ninh]
threshold = 0
delay = 0
inhWeight = inhBurstWeight = 0  // number of synapses
//  expected AMPA/NMDA conductance: 100 pS --> 5mV deflection in dendrite of 0.5 diam
excWeight = excBurstWeight = 0  // uS of excitatory synapses 

proc inPy(){
  // python wrapper as 'in' is a reserved keyword
  if(numarg()==1){
    in($1)
  }else if(numarg()==2){
    in($1,$2)
  }else if(numarg()==3){
    in($1,$2,$3)
  }else if(numarg()==5){
    in($1,$2,$3,$4,$5)
  }else if(numarg()==11){
    in($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
  }
  
}
proc in() {
  // 
  if(persistentSynapses==1||persistentSynapses==2){
    if(numarg()==1){
      inPersist($1,$1*stdi_config)
    }else if(numarg()==2){
      inPersist($1,$2)
    }
  }else{
    if(numarg()==1){
      inHz($1)
    }else if(numarg()==2){
      inHz($1,$2)
    }else if(numarg()==3){
      inHz($1,$2,$3)
    }else if(numarg()==5){
      inHz($1,$2,$3,$4,$5)
    }else if(numarg()==11){
      // NORMAL
      // 1: Hz before and after burst (Hz)
      // 2: duration of initial stim (s)
      // 3: start time (ms)
      // 4: noise
      // 5: weight/number
      // BURST
      // 6: Hz, 7: duration
      // 8: start -> should be same as duration + start of NORMAL
      // 9: noise, 10: weight
      // NORMAL
      // 1: Hz as before
      // 11: duration
      // 7 & 8: start - duration of burst (x1000) + start of burst
      // 4: noise
      // 5: weight
      inHz($1,$2,$3,$4,$5)
      inBurst($6,$7,$8,$9,$10)
      inAfterBurstHz($1,$11,$7*1000+$8,$4,$5)
    }
  }
}

proc ex() {
  // 
  if(persistentSynapses==1||persistentSynapses==3){
    if(numarg()==1){
      exPersist($1,$1*stde_config)
    }else if(numarg()==2){
      exPersist($1,$2)
    }
  }else{
    if(numarg()==1){
      exHz($1)
    }else if(numarg()==2){
      exHz($1,$2)
    }else if(numarg()==3){
      exHz($1,$2,$3)
    }else if(numarg()==5){
      exHz($1,$2,$3,$4,$5)
    }else if(numarg()==11){
      // see in()
      exHz($1,$2,$3,$4,$5)
      exBurst($6,$7,$8,$9,$10)
      exAfterBurstHz($1,$11,$7*1000+$8,$4,$5)
    }
  }
}

proc inHz() {
  // args:
  //    $1: Frequency (Hz)
  //    $2: Noise (0-1)
  //    $3: Weight - related to number of synapses activated
  if(numarg()>=1){
    inhHz = $1
  }
  if(numarg()>=2){
    inhNoise = $2
  }
  if(numarg()>=3){
    inhWeight = $3
  }
  if(numarg()==5){
    // args:
    //    $1: Frequency (Hz)
    //    $2: Duration
    //    $3: Start
    //    $4: Noise (0-1)
    //    $5: Weight - related to number of synapses activated
    inhHz = $1
    inhDuration = $2
    inhStart = $3
    inhNoise = $4
    inhWeight = $5
  }

  for i = 0, Isyn.count()-1{
    stimnet(netstimIn[i],inhHz,inhDuration,inhStart,inhNoise)
    netconIn[i].weight = inhWeight
  }

}
proc exHz() {
  // args:
  //    $1: Frequency (Hz)
  //    $2: Noise (0-1)
  //    $3: Weight - related to number of synapses activated
  if(numarg()>=1){
    excHz = $1
  }
  if(numarg()>=2){
    excNoise = $2
  }
  if(numarg()>=3){
    excWeight = $3
  }
  if(numarg()==5){
    // args:
    //    $1: Frequency (Hz)
    //    $2: Duration
    //    $3: Start
    //    $4: Noise (0-1)
    //    $5: Weight (uS) - related to number of synapses activated
    excHz = $1
    excDuration = $2
    excStart = $3
    excNoise = $4
    excWeight = $5
  }
  for i = 0, Esyn.count()-1{
    stimnet(netstimEx[i],excHz,excDuration,excStart,excNoise)
    netconEx[i].weight = excWeight
  }

}

proc inBurst(){
  // args:
  //    $1: Frequency (Hz)
  //    $2: Duration
  //    $3: Start
  //    $4: Noise (0-1)
  //    $5: Weight (uS) - related to number of synapses activated
  // if in doubt, be specific
  if(numarg()>=1){
    inhHzBurst=$1
  }
  if(numarg()>=2){
    inhBurstDuration = $2
  }
  if(numarg()>=3){
    inhBurstStart = $3
  }
  if(numarg()>=4){
    inhBurstNoise = $4
  }
  if(numarg()==5){
    inhBurstWeight = $5
  }
    
  for i = 0, Isyn.count()-1{
    stimnet(netstimInBurst[i],inhBurstHz,inhBurstDuration,inhBurstStart,inhBurstNoise)
    netconInBurst[i].weight = inhBurstWeight
  }
}

proc exBurst(){
  // args:
  //    $1: Frequency (Hz)
  //    $2: Duration
  //    $3: Start
  //    $4: Noise (0-1)
  //    $5: Weight (uS) - related to number of synapses activated
  // if in doubt, be specific
  if(numarg()>=1){
    excHzBurst=$1
  }
  if(numarg()>=2){
    excBurstDuration = $2
  }
  if(numarg()>=3){
    excBurstStart = $3
  }
  if(numarg()>=4){
    excBurstNoise = $4
  }
  if(numarg()==5){
    excBurstWeight = $5
  }
    
  for i = 0, Esyn.count()-1{
    stimnet(netstimExBurst[i],excBurstHz,excBurstDuration,excBurstStart,excBurstNoise)
    netconExBurst[i].weight = excBurstWeight
  }
}

proc inAfterBurstHz() {
  // args:
  //    $1: Frequency (Hz)
  //    $2: Noise (0-1)
  //    $3: Weight (uS) - related to number of synapses activated
  if(numarg()>=1){
    inhAfterHz = $1
  }
  if(numarg()>=2){
    inhAfterNoise = $2
  }
  if(numarg()>=3){
    inhAfterWeight = $3
  }
  if(numarg()==5){
    // args:
    //    $1: Frequency (Hz)
    //    $2: Duration
    //    $3: Start
    //    $4: Noise (0-1)
    //    $5: Weight (uS) - related to number of synapses activated
    inhAfterHz = $1
    inhAfterDuration = $2
    inhAfterStart = $3
    inhAfterNoise = $4
    inhAfterWeight = $5
  }

  for i = 0, Isyn.count()-1{
    stimnet(netstimInAfterBurst[i],inhAfterHz,inhAfterDuration,inhAfterStart,inhAfterNoise)
    netconInAfterBurst[i].weight = inhAfterWeight
  }
}

proc exAfterBurstHz() {
  // args:
  //    $1: Frequency (Hz)
  //    $2: Noise (0-1)
  //    $3: Weight (uS) - related to number of synapses activated
  if(numarg()>=1){
    excAfterHz = $1
  }
  if(numarg()>=2){
    excAfterNoise = $2
  }
  if(numarg()>=3){
    excAfterWeight = $3
  }
  if(numarg()==5){
    // args:
    //    $1: Frequency (Hz)
    //    $2: Duration
    //    $3: Start
    //    $4: Noise (0-1)
    //    $5: Weight (uS) - related to number of synapses activated
    excAfterHz = $1
    excAfterDuration = $2
    excAfterStart = $3
    excAfterNoise = $4
    excAfterWeight = $5
  }

  for i = 0, Esyn.count()-1{
    stimnet(netstimExAfterBurst[i],excAfterHz,excAfterDuration,excAfterStart,excAfterNoise)
    netconExAfterBurst[i].weight = excAfterWeight
  }
}

proc inPersist() {
  for i=0, Isyn.count()-1 {
    cond=$1
    stddev=$2
    Isyn.o(i).g_i0=persist_base*cond
    Isyn.o(i).std_i=persist_base*stddev
  }
}

proc exPersist() {
  for i=0, Esyn.count()-1 {
    cond=$1
    stddev=$2
    Esyn.o(i).g_e0=persist_base*cond
    Esyn.o(i).std_e=persist_base*stddev
  }
}

proc printEgaba(){
  printf("\t %g \n",0.8*ecl+0.2*ehco3)
}

proc newSynapses(){
  // Create a new set of synapses with specified number of excitatory and inhibitory cells
  // The (optional) last argument is the file name for the pattern of inhibition to follow
  // Synapses are evenly spaced along their respective compartment
  // args:
  //    $1: Number of excitatory synapses
  //    $2: Number of inhibitiory synapses
  //    $s3: Name of synaptic pattern file to be loaded (optional, NEURON seems to have issues with this)
  nexc=$1
  ninh=$2
  if(nexc<1){
    nexc=1
    printf("1 excitatory synapse\n")
  }
  if(ninh<1){
    ninh=1
    printf("1 inhibitory synapse\n")
  }
  if(name_declared("synapseFile")==4){
    //if(numarg()==3){
    //  synapseFile = $s3
    //}
    load_file(1,synapseFile)
  }else{
    printf("Please define synapse file (synapseFile) first\n")
  }
  inhibitCon()
  exciteCon()
}

proc clumpSynapses(){
  // by default synapses are evenly spaced along a comparment. This clumps them in distinct groups.
  // args:
  //    $1: number of groups
  groups = $1
  synDist = 1/groups
  if(nexcL>0){
    if (nexcL/groups<1){
      print "more groups than nexcL synapses"
      groups = nexcL
      synDist = 1/groups
    }
    for nGroups = 0, groups-1{
      for i = 0, (nexcL/groups)-1{
        index = i+(nGroups*(nexcL/groups))
        ldend lexsy[index].loc(nGroups*synDist+synDist/2)
      }
    }
  }
  groups = $1
  if(ninhL>0){
    if (ninhL/groups<1){
      print "more groups than ninhL synapses"
      groups = ninhL
      synDist = 1/groups
    }
    for nGroups = 0, groups-1{
      for i = 0, (ninhL/groups)-1{
        index = i+(nGroups*(ninhL/groups))
        ldend linhsy[index].loc(nGroups*synDist+synDist/2)
      }
    }
  }
  groups = $1
  if(nexcB>0){
    if (nexcB/groups<1){
      print "more groups than nexcB synapses"
      groups = nexcB
      synDist = 1/groups
    }
    for nGroups = 0, groups-1{
      for i = 0, (nexcB/groups)-1{
        index = i+(nGroups*(nexcB/groups))
        bdend bexsy[index].loc(nGroups*synDist+synDist/2)
      }
    }
  }
  groups = $1
  if(ninhB>0){
    if (ninhB/groups<1){
      print "more groups than ninhB synapses"
      groups = ninhB
      synDist = 1/groups
    }
    for nGroups = 0, groups-1{
      for i = 0, (ninhB/groups)-1{
        index = i+(nGroups*(ninhB/groups))
        bdend binhsy[index].loc(nGroups*synDist+synDist/2)
      }
    }
  }
  print "synapses clumped into ", groups, " groups"
}

proc changeSynapseType(){
  if(numarg()==1){
    persistentSynapses = $1
  }else{
    persistentSynapses = 1-persistentSynapses
  }
  if(persistentSynapses<0){
    persistentSynapses = -1*persistentSynapses
  }
  printf("persistentSynapses changed to %g\n",persistentSynapses)
  printf("loading synapses\n")
  load_file(1,synapseFile)
  printf("loaded\n")
  inhibitCon()
  exciteCon()
}

////// set up connections between stims and synapses ///////
proc inhibitCon(){local i, w
  objectvar netconIn[ninh], netstimIn[ninh], rsIn[ninh] //re-initialise to correct size
  //objectvar netconInBurst[ninh], netconInAfterBurst[ninh], netstimInBurst[ninh], netstimInAfterBurst[ninh], rsInBurst[ninh], rsAfterBurst[ninh]
  if(persistentSynapses==0 || persistentSynapses==2){
      if(numarg()==1){
        w = $1
        inhWeight = w
      }else{
        w = inhWeight
      }
      for i=0, ninh-1{
        netstimIn[i] = new NetStim()
        rsIn[i] = new RandomStream(i)
        netstimIn[i].noiseFromRandom(rsIn[i].r)
        rsIn[i].r.negexp(1) // must specify negexp distribution with mean = 1
        rsIn[i].start()
        //netstimInBurst[i] = new NetStim()
        //netstimInAfterBurst[i] = new NetStim()
      }

      for i = 0, Isyn.count()-1{
        netconIn[i] = new NetCon(netstimIn[i],Isyn.o(i),threshold,delay,w)
        //netconInBurst[i] = new NetCon(netstimInBurst[i],Isyn.o(i),threshold,delay,w)
        //netconInAfterBurst[i] = new NetCon(netstimInAfterBurst[i],Isyn.o(i),threshold,delay,w)
      }
      inHz()
      //inBurst()
      //inAfterBurstHz()
  }
}
proc exciteCon(){local i w
  objectvar netconEx[nexc],netstimEx[nexc],rsEx[nexc]   //re-initialise to correct size
  //objectvar netconExBurst[nexc], netconExAfterBurst[nexc], netstimExBurst[nexc], netstimExAfterBurst[nexc], rsExBurst[nexc], rsExAfterBurst[nexc]
  if(persistentSynapses==0 || persistentSynapses==3){
      if(numarg()==1){
        w = $1
        excWeight=w
      }else{
        w = excWeight
      }
      for i=0, nexc-1{
        netstimEx[i] = new NetStim()
        rsEx[i] = new RandomStream(i)
        netstimEx[i].noiseFromRandom(rsEx[i].r)
        rsEx[i].r.negexp(1) // must specify negexp distribution with mean = 1
        rsEx[i].start()
        //netstimExBurst[i] = new NetStim()
        //netstimExAfterBurst[i] = new NetStim()
      }
      for i = 0, Esyn.count()-1{
        netconEx[i] = new NetCon(netstimEx[i],Esyn.o(i),threshold,delay,w)
        //netconExBurst[i] = new NetCon(netstimExBurst[i],Esyn.o(i),threshold,delay,w)
        //netconExAfterBurst[i] = new NetCon(netstimExAfterBurst[i],Esyn.o(i),threshold,delay,w)
      }
      exHz()
      //exBurst()
      //exAfterBurstHz()
  }
}

inhibitCon()
exciteCon()


//------------------------------------------------------------------------------
// Passive conductances
//------------------------------------------------------------------------------
proc changePas(){
  forall{
    gkpbar = $1
    gkpbar_pasghk = gkpbar*pK
    gnapbar_pasghk = gkpbar*pNa
    gclpbar_pasghk = gkpbar*pCl
  } 
}

proc changeP(){
  //pK:pNa:pCl = $1:$2:$3
  forall{
    if(numarg()==2){
      pNa = $1
      pCl = $2
    }else if($1==1){
      pNa = $2
      pCl = $3
    }else{
      pK = $1
      pNa = $2
      pCl = $3
    }
    gkpbar_pasghk = gkpbar_pasghk*pK
    gnapbar_pasghk = gkpbar_pasghk*pNa
    gclpbar_pasghk = gkpbar_pasghk*pCl
  }
}

proc changePCl(){
  forall{
    pCl = $1
    gclpbar_pasghk = gkpbar_pasghk*pCl
  }
}

proc printP(){
  printf("gkpbar_pasghk: %g \t gnapbar_pasghk: %g \t gclpbar_pasghk: %g \n %g:%g:%g\n",gkpbar_pasghk,gnapbar_pasghk,gclpbar_pasghk,pK,pNa,pCl)
}


//------------------------------------------------------------------------------
// Output
//------------------------------------------------------------------------------
access axon
objref apc
apc=new APCount(0.95)
apc.thresh=50
objref output
output=new Vector()
apc.record(output)
access soma

//print "method.hoc loaded"
